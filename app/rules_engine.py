import logging
from datetime import datetime, time
from .models import FraudRule

logger = logging.getLogger(__name__)

class RulesEngine:
    def __init__(self):
        self.rules = self._load_rules()
        logger.info(f"üéØ RulesEngine initialized with {len(self.rules)} active rules")
    
    def _load_rules(self):
        """–ó–∞–≥—Ä—É–∂–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –ø—Ä–∞–≤–∏–ª–∞ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
        try:
            rules = FraudRule.objects.filter(is_active=True)
            logger.info(f"üì• Loaded rules: {[rule.name for rule in rules]}")
            return rules
        except Exception as e:
            logger.error(f"‚ùå Error loading rules: {e}")
            return []
    
    def apply_rules(self, transaction_data):
        """–ü—Ä–∏–º–µ–Ω—è–µ–º –≤—Å–µ –ø—Ä–∞–≤–∏–ª–∞ –∫ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏"""
        results = {
            'is_fraud': False,
            'fraud_score': 0.0,
            'triggered_rules': [],
            'details': {}
        }
        
        amount = float(transaction_data.get('amount', 0))
        logger.info(f"üí∞ Processing transaction amount: {amount}")
        
        for rule in self.rules:
            logger.info(f"üîé Applying rule: {rule.name} (type: {rule.rule_type})")
            rule_result = self._apply_single_rule(rule, transaction_data)
            if rule_result['triggered']:
                logger.info(f"üö® Rule triggered: {rule.name} - {rule_result['reason']}")
                results['triggered_rules'].append(rule.name)
                results['fraud_score'] = max(results['fraud_score'], rule_result['score'])
                results['details'][rule.name] = rule_result['reason']
        
        # –ï—Å–ª–∏ –µ—Å—Ç—å —Å—Ä–∞–±–æ—Ç–∞–≤—à–∏–µ –ø—Ä–∞–≤–∏–ª–∞, –ø–æ–º–µ—á–∞–µ–º –∫–∞–∫ –º–æ—à–µ–Ω–Ω–∏—á–µ—Å—Ç–≤–æ
        if results['triggered_rules']:
            results['is_fraud'] = True
            logger.info(f"üéØ Transaction marked as FRAUD. Score: {results['fraud_score']}")
        else:
            logger.info("‚úÖ Transaction is CLEAN")
            
        return results
    
    def _apply_single_rule(self, rule, transaction_data):
        """–ü—Ä–∏–º–µ–Ω—è–µ–º –æ–¥–Ω–æ –ø—Ä–∞–≤–∏–ª–æ –∫ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏"""
        try:
            if rule.rule_type == 'threshold':
                return self._apply_threshold_rule(rule, transaction_data)
            elif rule.rule_type == 'pattern':
                return self._apply_pattern_rule(rule, transaction_data)
            elif rule.rule_type == 'composite':
                return self._apply_composite_rule(rule, transaction_data)
            elif rule.rule_type == 'ml':
                return self._apply_ml_rule(rule, transaction_data)
            else:
                return {'triggered': False, 'score': 0.0, 'reason': 'Unknown rule type'}
        except Exception as e:
            logger.error(f"Error applying rule {rule.name}: {e}")
            return {'triggered': False, 'score': 0.0, 'reason': f'Error: {str(e)}'}
    
    def _apply_threshold_rule(self, rule, transaction_data):
        """–ü–æ—Ä–æ–≥–æ–≤–æ–µ –ø—Ä–∞–≤–∏–ª–æ: —Å—É–º–º–∞ > X"""
        amount = float(transaction_data.get('amount', 0))
        threshold = float(rule.threshold_amount or 0)
        
        logger.info(f"üìä Threshold rule check: {amount} > {threshold}")
        
        if amount > threshold:
            return {
                'triggered': True,
                'score': 0.7,
                'reason': f'Amount {amount} exceeds threshold {threshold}'
            }
        return {'triggered': False, 'score': 0.0, 'reason': ''}
    
    def _apply_pattern_rule(self, rule, transaction_data):
        """–ü—Ä–∞–≤–∏–ª–æ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤ (–ø–æ–∫–∞ –∑–∞–≥–ª—É—à–∫–∞)"""
        # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –¥–ª—è –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤
        # –ù–∞–ø—Ä–∏–º–µ—Ä: —Å–µ—Ä–∏—è –º–∞–ª—ã—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –∑–∞ –∫–æ—Ä–æ—Ç–∫–∏–π –ø–µ—Ä–∏–æ–¥
        logger.info("üîç Pattern rule check (not implemented)")
        return {'triggered': False, 'score': 0.0, 'reason': 'Pattern rule not implemented'}
    
    def _apply_composite_rule(self, rule, transaction_data):
        """–°–æ—Å—Ç–∞–≤–Ω–æ–µ –ø—Ä–∞–≤–∏–ª–æ: –±–æ–ª—å—à–∞—è —Å—É–º–º–∞ –ò –Ω–æ—á–Ω–æ–µ –≤—Ä–µ–º—è"""
        amount = float(transaction_data.get('amount', 0))
        current_time = datetime.now().time()
    
        # –ë–µ—Ä–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        nighttime_start = rule.nighttime_start or time(22, 0)  # 22:00 –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        nighttime_end = rule.nighttime_end or time(6, 0)       # 06:00 –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        amount_threshold = float(rule.composite_amount or 50000)  # 50,000 –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–æ—á–Ω–æ–µ –≤—Ä–µ–º—è (—É—á–∏—Ç—ã–≤–∞–µ–º, —á—Ç–æ –Ω–æ—á—å –º–æ–∂–µ—Ç –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç—å —á–µ—Ä–µ–∑ –ø–æ–ª–Ω–æ—á—å)
        if nighttime_start < nighttime_end:
        # –ù–æ—Ä–º–∞–ª—å–Ω—ã–π —Å–ª—É—á–∞–π: 22:00-06:00
            is_nighttime = nighttime_start <= current_time <= nighttime_end
        else:
            # –ù–æ—á—å –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç —á–µ—Ä–µ–∑ –ø–æ–ª–Ω–æ—á—å: 22:00-06:00 —Å–ª–µ–¥—É—é—â–µ–≥–æ –¥–Ω—è
            is_nighttime = (current_time >= nighttime_start) or (current_time <= nighttime_end)
    
        is_large_amount = amount > amount_threshold
    
        logger.info(f"üåô Composite rule check: amount={amount}, threshold={amount_threshold}, "
                    f"nighttime={is_nighttime} ({nighttime_start}-{nighttime_end}), current_time={current_time}")
    
        if is_large_amount and is_nighttime:
            return {
                'triggered': True,
                'score': 0.8,
                'reason': f'Large amount {amount} at nighttime ({current_time})'
            }
        return {'triggered': False, 'score': 0.0, 'reason': ''}
    
    def _apply_ml_rule(self, rule, transaction_data):
        """ML –ø—Ä–∞–≤–∏–ª–æ (–ø–æ–∫–∞ –∑–∞–≥–ª—É—à–∫–∞ —Å –ø—Ä–æ—Å—Ç–æ–π –ª–æ–≥–∏–∫–æ–π)"""
        amount = float(transaction_data.get('amount', 0))
        
        # –ü—Ä–æ—Å—Ç–∞—è –∏–º–∏—Ç–∞—Ü–∏—è ML –º–æ–¥–µ–ª–∏
        ml_score = min(amount / 100000, 1.0)  # –ß–µ–º –±–æ–ª—å—à–µ —Å—É–º–º–∞, —Ç–µ–º –≤—ã—à–µ score
        ml_threshold = float(rule.ml_threshold or 0.8)
        
        logger.info(f"ü§ñ ML rule check: score={ml_score:.2f}, threshold={ml_threshold}")
        
        if ml_score > ml_threshold:
            return {
                'triggered': True,
                'score': ml_score,
                'reason': f'ML score {ml_score:.2f} exceeds threshold {ml_threshold}'
            }
        return {'triggered': False, 'score': 0.0, 'reason': ''}