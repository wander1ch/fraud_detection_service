import time
import logging
from decimal import Decimal
from .rules_engine import RulesEngine
from .models import FraudCheckResult, Transaction
from .reporting import ReportingEngine
from celery import shared_task
from celery.utils.log import get_task_logger


logger = logging.getLogger(__name__)

def process_transaction(transaction_data):
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –¥–≤–∏–∂–∫–∞ –ø—Ä–∞–≤–∏–ª
    """
    try:
        logger.info(f"üöÄ Starting transaction processing: {transaction_data}")
        
        # –ò–º–∏—Ç–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
        time.sleep(1)
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –¥–≤–∏–∂–æ–∫ –ø—Ä–∞–≤–∏–ª –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
        rules_engine = RulesEngine()
        logger.info(f"üìã Loaded {len(rules_engine.rules)} active rules")
        
        fraud_result = rules_engine.apply_rules(transaction_data)
        logger.info(f"üîç Fraud detection result: {fraud_result}")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏
        try:
            transaction = Transaction.objects.get(id=transaction_data['id'])
            
            # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ –ø—Ä–æ–≤–µ—Ä–∫–∏
            FraudCheckResult.objects.create(
                transaction=transaction,
                total_rules_checked=len(rules_engine.rules),
                triggered_rules=fraud_result['triggered_rules'],
                final_score=fraud_result['fraud_score'],
                details=fraud_result['details']
            )
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            reporting_engine = ReportingEngine()
            reporting_engine.update_daily_stats()
            
        except Exception as e:
            logger.error(f"‚ùå Error saving fraud check result: {e}")
        
        result = {
            'transaction_id': transaction_data.get('id'),
            'is_fraud': fraud_result['is_fraud'],
            'fraud_score': float(round(fraud_result['fraud_score'], 2)),
            'triggered_rules': fraud_result['triggered_rules'],
            'details': fraud_result['details'],
            'status': 'suspicious' if fraud_result['is_fraud'] else 'completed'
        }
        
        logger.info(f"‚úÖ Transaction processed: {result}")
        return result
        
    except Exception as e:
        logger.error(f"‚ùå Error processing transaction: {str(e)}")
        raise

@shared_task(bind=True, max_retries=3)
def process_transaction_task(self, transaction_id):
    """
    –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –∑–∞–¥–∞—á–∞ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
    """
    try:
        logger.info(f"üöÄ Starting async processing for transaction {transaction_id}")
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
        transaction = Transaction.objects.get(id=transaction_id)
        transaction.status = 'processing'
        transaction.save()
        
        # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –¥–≤–∏–∂–∫–∞ –ø—Ä–∞–≤–∏–ª
        transaction_data = {
            'id': str(transaction.id),
            'correlation_id': str(transaction.correlation_id),
            'amount': float(transaction.amount),
            'from_account': transaction.from_account,
            'to_account': transaction.to_account
        }
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –¥–≤–∏–∂–æ–∫ –ø—Ä–∞–≤–∏–ª –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
        rules_engine = RulesEngine()
        fraud_result = rules_engine.apply_rules(transaction_data)
        
        logger.info(f"üîç Fraud detection result: {fraud_result}")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏
        FraudCheckResult.objects.create(
            transaction=transaction,
            total_rules_checked=len(rules_engine.rules),
            triggered_rules=fraud_result['triggered_rules'],
            final_score=fraud_result['fraud_score'],
            details=fraud_result['details']
        )
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
        transaction.status = 'suspicious' if fraud_result['is_fraud'] else 'completed'
        transaction.is_fraud = fraud_result['is_fraud']
        transaction.fraud_score = fraud_result['fraud_score']
        transaction.save()
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        reporting_engine = ReportingEngine()
        reporting_engine.update_daily_stats()
        
        # –ï—Å–ª–∏ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ –º–æ—à–µ–Ω–Ω–∏—á–µ—Å—Ç–≤–æ, –º–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        if fraud_result['is_fraud']:
            logger.warning(f"üö® Fraud detected in transaction {transaction_id}")
            # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –æ—Ç–ø—Ä–∞–≤–∫—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
            # send_fraud_notification.delay(transaction_id)
        
        result = {
            'transaction_id': transaction_id,
            'is_fraud': fraud_result['is_fraud'],
            'fraud_score': fraud_result['fraud_score'],
            'triggered_rules': fraud_result['triggered_rules'],
            'status': transaction.status
        }
        
        logger.info(f"‚úÖ Transaction {transaction_id} processed successfully")
        return result
        
    except Transaction.DoesNotExist:
        logger.error(f"Transaction {transaction_id} not found")
        raise
    except Exception as e:
        logger.error(f"Error processing transaction {transaction_id}: {str(e)}")
        # –ü–æ–≤—Ç–æ—Ä—è–µ–º –∑–∞–¥–∞—á—É —á–µ—Ä–µ–∑ 60 —Å–µ–∫—É–Ω–¥
        raise self.retry(exc=e, countdown=60)

@shared_task
def batch_process_transactions(transaction_ids):
    """
    –ü–∞–∫–µ—Ç–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
    """
    results = []
    for transaction_id in transaction_ids:
        result = process_transaction_task.delay(transaction_id)
        results.append(result)
    return results

@shared_task
def cleanup_old_transactions(days=30):
    """
    –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π (–∞—Ä—Ö–∏–≤–∞—Ü–∏—è)
    """
    from django.utils import timezone
    from datetime import timedelta
    
    cutoff_date = timezone.now() - timedelta(days=days)
    old_transactions = Transaction.objects.filter(timestamp__lt=cutoff_date)
    
    count = old_transactions.count()
    old_transactions.delete()
    
    logger.info(f"üßπ Cleaned up {count} transactions older than {days} days")
    return count

@shared_task
def generate_daily_report():
    """
    –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞
    """
    from .reporting import ReportingEngine
    reporting_engine = ReportingEngine()
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    reporting_engine.update_daily_stats()
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç
    report = reporting_engine.generate_fraud_report(1)
    
    logger.info("üìä Daily report generated")
    return report

@shared_task
def send_fraud_notification(transaction_id):
    """
    –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ–π —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
    """
    try:
        transaction = Transaction.objects.get(id=transaction_id)
        
        # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞—Ç—å —Å email, SMS, Telegram –∏ —Ç.–¥.
        message = f"""
        üö® –û–ë–ù–ê–†–£–ñ–ï–ù–ê –ü–û–î–û–ó–†–ò–¢–ï–õ–¨–ù–ê–Ø –¢–†–ê–ù–ó–ê–ö–¶–ò–Ø
        
        ID: {transaction.correlation_id}
        –°—É–º–º–∞: {transaction.amount}
        –û—Ç: {transaction.from_account}
        –ö: {transaction.to_account}
        –í—Ä–µ–º—è: {transaction.timestamp}
        Fraud Score: {transaction.fraud_score}
        """
        
        # –ü—Ä–∏–º–µ—Ä –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ –ª–æ–≥ (–∑–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Ä–µ–∞–ª—å–Ω—É—é –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é)
        logger.warning(f"FRAUD ALERT: {message}")
        
        return True
        
    except Exception as e:
        logger.error(f"Error sending fraud notification: {e}")
        return False