from django.shortcuts import render, redirect
from django.views import View
from django.contrib.auth import login, logout
from django.contrib.auth.forms import AuthenticationForm
from django.http import HttpResponse
import uuid
from .models import Transaction
from .serializers import TransactionSerializer  # –ò–º–ø–æ—Ä—Ç –∏–∑ serializers.py
from .tasks import process_transaction
from .reporting import ReportingEngine
from django.views.decorators.csrf import csrf_exempt
from django.utils.decorators import method_decorator
from .tasks import process_transaction_task, send_fraud_notification
class LoginView(View):
    def get(self, request):
        # –ü—Ä–æ—Å—Ç–∞—è HTML —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –≤—Ö–æ–¥–∞
        html = """
        <!DOCTYPE html>
        <html>
        <head>
            <title>–í—Ö–æ–¥ –≤ —Å–∏—Å—Ç–µ–º—É</title>
            <style>
                body { font-family: Arial, sans-serif; margin: 40px; }
                .container { max-width: 400px; margin: 0 auto; }
                .form-group { margin-bottom: 15px; }
                .form-control { width: 100%; padding: 8px; margin-top: 5px; }
                .btn { padding: 10px 20px; background: #007cba; color: white; border: none; cursor: pointer; width: 100%; }
            </style>
        </head>
        <body>
            <div class="container">
                <h1>üîê –í—Ö–æ–¥ –≤ —Å–∏—Å—Ç–µ–º—É</h1>
                <form method="post">
                    <input type="hidden" name="csrfmiddlewaretoken" value="{{ csrf_token }}">
                    <div class="form-group">
                        <label>–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:</label>
                        <input type="text" name="username" class="form-control" required>
                    </div>
                    <div class="form-group">
                        <label>–ü–∞—Ä–æ–ª—å:</label>
                        <input type="password" name="password" class="form-control" required>
                    </div>
                    <button type="submit" class="btn">–í–æ–π—Ç–∏</button>
                </form>
                <div style="margin-top: 20px;">
                    <a href="/">‚Üê –ù–∞–∑–∞–¥ –Ω–∞ –≥–ª–∞–≤–Ω—É—é</a>
                </div>
            </div>
        </body>
        </html>
        """
        return HttpResponse(html)
    
    def post(self, request):
        form = AuthenticationForm(request, data=request.POST)
        if form.is_valid():
            user = form.get_user()
            login(request, user)
            return redirect('app:home')
        
        # –ï—Å–ª–∏ –æ—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞, –ø–æ–∫–∞–∂–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        html = """
        <!DOCTYPE html>
        <html>
        <head>
            <title>–í—Ö–æ–¥ –≤ —Å–∏—Å—Ç–µ–º—É</title>
            <style>
                body { font-family: Arial, sans-serif; margin: 40px; }
                .container { max-width: 400px; margin: 0 auto; }
                .error { color: red; margin-bottom: 15px; }
            </style>
        </head>
        <body>
            <div class="container">
                <h1>üîê –í—Ö–æ–¥ –≤ —Å–∏—Å—Ç–µ–º—É</h1>
                <div class="error">–ù–µ–≤–µ—Ä–Ω–æ–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ –ø–∞—Ä–æ–ª—å.</div>
                <a href="/login/">‚Üê –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞</a>
            </div>
        </body>
        </html>
        """
        return HttpResponse(html)

class LogoutView(View):
    def get(self, request):
        logout(request)
        return redirect('app:home')

@method_decorator(csrf_exempt, name='dispatch')
class HomeView(View):
    def get(self, request):
        # –ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º CSRF —Ç–æ–∫–µ–Ω–æ–º
        from django.middleware.csrf import get_token
        csrf_token = get_token(request)
        
        html = f"""
        <!DOCTYPE html>
        <html>
        <head>
            <title>Fraud Detection System</title>
            <meta charset="UTF-8">
            <style>
                body {{ 
                    font-family: Arial, sans-serif; 
                    margin: 0;
                    padding: 0;
                    background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
                    min-height: 100vh;
                }}
                .container {{ 
                    max-width: 1000px; 
                    margin: 0 auto;
                    background: white;
                    padding: 30px;
                    border-radius: 15px;
                    box-shadow: 0 10px 30px rgba(0,0,0,0.1);
                }}
                .header {{
                    text-align: center;
                    margin-bottom: 30px;
                }}
                .header h1 {{
                    color: #2c3e50;
                    margin-bottom: 10px;
                }}
                .dashboard {{
                    display: grid;
                    grid-template-columns: 1fr 1fr;
                    gap: 30px;
                    margin-bottom: 30px;
                }}
                .card {{
                    background: #f8f9fa;
                    padding: 25px;
                    border-radius: 10px;
                    border-left: 4px solid #3498db;
                }}
                .form-group {{ 
                    margin-bottom: 20px; 
                }}
                .form-control {{ 
                    width: 100%; 
                    padding: 12px; 
                    border: 1px solid #ddd; 
                    border-radius: 5px; 
                    font-size: 16px;
                }}
                .btn {{ 
                    padding: 12px 25px; 
                    background: #3498db; 
                    color: white; 
                    border: none; 
                    border-radius: 5px; 
                    cursor: pointer; 
                    font-size: 16px;
                    text-decoration: none;
                    display: inline-block;
                }}
                .btn:hover {{ 
                    background: #2980b9; 
                }}
                .nav-links {{
                    display: grid;
                    grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
                    gap: 15px;
                    margin-top: 30px;
                }}
                .nav-links a {{
                    padding: 15px;
                    background: #f8f9fa;
                    color: #2c3e50;
                    text-decoration: none;
                    border-radius: 8px;
                    text-align: center;
                    transition: background 0.3s;
                }}
                .nav-links a:hover {{
                    background: #3498db;
                    color: white;
                }}
                @media (max-width: 768px) {{
                    .dashboard {{
                        grid-template-columns: 1fr;
                    }}
                }}
            </style>
        </head>
        <body>
            <div class="container">
                <div class="header">
                    <h1>üöÄ Fraud Detection System</h1>
                    <p>–°–∏—Å—Ç–µ–º–∞ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è –º–æ—à–µ–Ω–Ω–∏—á–µ—Å–∫–∏—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π</p>
                </div>

                <div class="dashboard">
                    <div class="card">
                        <h2>üí≥ –°–æ–∑–¥–∞—Ç—å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é</h2>
                        <form method="post">
                            <input type="hidden" name="csrfmiddlewaretoken" value="{csrf_token}">
                            <div class="form-group">
                                <label><strong>–°—É–º–º–∞:</strong></label>
                                <input type="number" name="amount" class="form-control" step="0.01" min="0.01" placeholder="1000.00" required>
                            </div>
                            <div class="form-group">
                                <label><strong>–û—Ç –∞–∫–∫–∞—É–Ω—Ç–∞:</strong></label>
                                <input type="text" name="from_account" class="form-control" placeholder="user123" required>
                            </div>
                            <div class="form-group">
                                <label><strong>–ö –∞–∫–∫–∞—É–Ω—Ç–∞:</strong></label>
                                <input type="text" name="to_account" class="form-control" placeholder="user456" required>
                            </div>
                            <button type="submit" class="btn" style="width: 100%;">üì® –°–æ–∑–¥–∞—Ç—å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é</button>
                        </form>
                    </div>

                    <div class="card">
                        <h2>üìä –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è</h2>
                        <p>–°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ!</p>
                        <p>–°–æ–∑–¥–∞–π—Ç–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞ –º–æ—à–µ–Ω–Ω–∏—á–µ—Å—Ç–≤–æ.</p>
                        <p><strong>–¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ:</strong></p>
                        <ul>
                            <li>–ú–∞–ª–∞—è —Å—É–º–º–∞: 1000 (–Ω–µ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ)</li>
                            <li>–ë–æ–ª—å—à–∞—è —Å—É–º–º–∞: 150000 (–ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ)</li>
                        </ul>
                    </div>
                </div>

                <div class="nav-links">
                    <a href="/admin/" target="_blank">‚öôÔ∏è –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å</a>
                    <a href="/api/docs/" target="_blank">üìñ API –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è</a>
                    <a href="/api/transactions/list/" target="_blank">üí∞ –°–ø–∏—Å–æ–∫ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π</a>
                    <a href="/login/">üîê –í–æ–π—Ç–∏ –≤ —Å–∏—Å—Ç–µ–º—É</a>
                </div>
            </div>
        </body>
        </html>
        """
        return HttpResponse(html)
    
    def post(self, request):
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ä–º—ã —Å–æ–∑–¥–∞–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
        try:
            amount = request.POST.get('amount')
            from_account = request.POST.get('from_account')
            to_account = request.POST.get('to_account')
            
            # –°–æ–∑–¥–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
            transaction = Transaction.objects.create(
                amount=amount,
                from_account=from_account,
                to_account=to_account,
                status='pending'
            )
            
            # –ó–ê–ü–£–°–ö–ê–ï–ú –ê–°–ò–ù–•–†–û–ù–ù–£–Æ –û–ë–†–ê–ë–û–¢–ö–£
            process_transaction_task.delay(transaction.id)
            
            message = f"""‚úÖ –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –ø—Ä–∏–Ω—è—Ç–∞ –≤ –æ–±—Ä–∞–±–æ—Ç–∫—É!

ID: {transaction.id}
Correlation ID: {transaction.correlation_id}
–°—Ç–∞—Ç—É—Å: –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è...
–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –≤ —Ñ–æ–Ω–æ–≤–æ–º —Ä–µ–∂–∏–º–µ.

–û–±–Ω–æ–≤–∏—Ç–µ —Å—Ç—Ä–∞–Ω–∏—Ü—É —á–µ—Ä–µ–∑ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞."""
            
        except Exception as e:
            message = f"‚ùå –û—à–∏–±–∫–∞: {str(e)}"
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏: {e}")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        from django.middleware.csrf import get_token
        csrf_token = get_token(request)
        
        html = f"""
        <!DOCTYPE html>
        <html>
        <head>
            <title>–†–µ–∑—É–ª—å—Ç–∞—Ç - Fraud Detection</title>
            <style>
                body {{ 
                    font-family: Arial, sans-serif; 
                    margin: 0;
                    padding: 0;
                    background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
                    min-height: 100vh;
                }}
                .container {{ 
                    max-width: 800px; 
                    margin: 0 auto;
                    background: white;
                    padding: 30px;
                    border-radius: 15px;
                    box-shadow: 0 10px 30px rgba(0,0,0,0.1);
                }}
                .result {{ 
                    margin-top: 20px; 
                    padding: 20px; 
                    border-radius: 8px; 
                }}
                .success {{ 
                    background: #d4edda; 
                    color: #155724; 
                    border-left: 4px solid #27ae60; 
                }}
                .error {{ 
                    background: #f8d7da; 
                    color: #721c24; 
                    border-left: 4px solid #e74c3c; 
                }}
                .btn {{ 
                    padding: 10px 20px; 
                    background: #007cba; 
                    color: white; 
                    text-decoration: none; 
                    border-radius: 5px; 
                    display: inline-block;
                    margin-top: 20px;
                }}
            </style>
        </head>
        <body>
            <div class="container">
                <h1>üìã –†–µ–∑—É–ª—å—Ç–∞—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏</h1>
                <div class="result {'success' if '‚úÖ' in message else 'error'}">
                    <pre style="white-space: pre-wrap; font-family: inherit;">{message}</pre>
                </div>
                <div>
                    <a href="/" class="btn">‚Üê –°–æ–∑–¥–∞—Ç—å –µ—â–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é</a>
                </div>
            </div>
        </body>
        </html>
        """
        return HttpResponse(html)

# API Views
@method_decorator(csrf_exempt, name='dispatch')
class TransactionCreateView(View):
    def post(self, request):
        # API endpoint –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
        from django.http import JsonResponse
        import json
        
        try:
            data = json.loads(request.body)
            serializer = TransactionSerializer(data=data)
            
            if serializer.is_valid():
                transaction = serializer.save(
                    status='pending',
                    is_fraud=False,
                    fraud_score=0.0
                )
                
                # –ó–ê–ü–£–°–ö–ê–ï–ú –ê–°–ò–ù–•–†–û–ù–ù–£–Æ –û–ë–†–ê–ë–û–¢–ö–£
                task = process_transaction_task.delay(transaction.id)
                
                return JsonResponse({
                    'id': str(transaction.id),
                    'correlation_id': str(transaction.correlation_id),
                    'status': 'processing',
                    'task_id': task.id,
                    'message': 'Transaction is being processed asynchronously'
                })
            
            return JsonResponse(serializer.errors, status=400)
            
        except Exception as e:
            return JsonResponse({'error': str(e)}, status=500)

class TransactionListView(View):
    def get(self, request):
        from django.http import JsonResponse
        transactions = Transaction.objects.all().order_by('-timestamp')[:10]
        data = []
        for transaction in transactions:
            data.append({
                'id': str(transaction.id),
                'correlation_id': str(transaction.correlation_id),
                'amount': str(transaction.amount),
                'from_account': transaction.from_account,
                'to_account': transaction.to_account,
                'status': transaction.status,
                'is_fraud': transaction.is_fraud,
                'timestamp': transaction.timestamp.isoformat()
            })
        return JsonResponse(data, safe=False)

# –û—Å—Ç–∞–ª—å–Ω—ã–µ API views...
class TransactionDetailView(View):
    def get(self, request, id):
        from django.http import JsonResponse
        try:
            transaction = Transaction.objects.get(id=id)
            return JsonResponse({
                'id': str(transaction.id),
                'correlation_id': str(transaction.correlation_id),
                'amount': str(transaction.amount),
                'from_account': transaction.from_account,
                'to_account': transaction.to_account,
                'status': transaction.status,
                'is_fraud': transaction.is_fraud,
                'fraud_score': transaction.fraud_score,
                'timestamp': transaction.timestamp.isoformat()
            })
        except Transaction.DoesNotExist:
            return JsonResponse({'error': 'Transaction not found'}, status=404)

class SystemOverviewView(View):
    def get(self, request):
        from django.http import JsonResponse
        reporting_engine = ReportingEngine()
        overview = reporting_engine.get_system_overview()
        return JsonResponse(overview)

class FraudReportView(View):
    def get(self, request):
        from django.http import JsonResponse
        from .reporting import ReportingEngine
        days = int(request.GET.get('days', 7))
        reporting_engine = ReportingEngine()
        report = reporting_engine.generate_fraud_report(days)
        return JsonResponse(report)